# Authentik - authentication and SSO platform
# Copy .env.example to .env and adjust database credentials and domain
services:
  # PostgreSQL database for Authentik
  authentik_db:
    image: postgres:${POSTGRES_TAG:-17}
    container_name: authentik_postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    volumes:
      - authentik_postgres_data:/var/lib/postgresql/data
    networks:
      - infraestructura_app-network
    labels:
      diun.enable: true

  # Redis cache for Authentik sessions
  authentik_cache:
    image: redis:${REDIS_TAG:-8.2-m01-alpine}
    container_name: authentik_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik_redis_data:/data
    networks:
      - infraestructura_app-network
    labels:
      diun.enable: true

  # Main Authentik application
  authentik_server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.3}
    container_name: authentik_server
    restart: unless-stopped
    # Uncomment the ports section to expose the service locally for setup in http://localhost:9000/if/flow/initial-setup/
    # ports:
    #   - "9000:9000"
    env_file:
      - .env
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    networks:
      - infraestructura_app-network
    depends_on:
      authentik_cache:
        condition: service_healthy
      authentik_db:
        condition: service_healthy
    labels:
      diun.enable: true
      traefik.enable: true
      traefik.http.routers.authentik.entrypoints: websecure,web
      traefik.http.routers.authentik.rule: Host(`${DOMAIN}`)
      traefik.http.routers.authentik.tls: true
      traefik.http.routers.authentik.tls.certresolver: cloudflare
      traefik.http.routers.authentik.middlewares: secure-headers@file
      traefik.http.services.authentik.loadbalancer.server.port: 9000

  # Background worker processing tasks
  authentik_worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.3}
    container_name: authentik_worker
    restart: unless-stopped
    env_file:
      - .env
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    networks:
      - infraestructura_app-network
    healthcheck:
      test: ["CMD", "ak", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 15
      start_period: 60s
    depends_on:
      authentik_cache:
        condition: service_healthy
      authentik_db:
        condition: service_healthy

volumes:
  authentik_postgres_data:
    external: true
  authentik_redis_data:
    external: true

networks:
  infraestructura_app-network:
    external: true
